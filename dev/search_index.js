var documenterSearchIndex = {"docs":
[{"location":"#TGGeometry","page":"Home","title":"TGGeometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.jl is a Julia wrapper around the tg C library for planar geometric predicates.  Specifically, it provides:","category":"page"},{"location":"","page":"Home","title":"Home","text":"intersects(geom1, geom2)\ncontains(geom1, geom2)\ntouches(geom1, geom2)\ndisjoint(geom1, geom2)\nequals(geom1, geom2)\ncovers(geom1, geom2)\ncoveredby(geom1, geom2)\nwithin(geom1, geom2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"from the DE-9IM model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is fully GeoInterface.jl compatible, and is able to accept any combination of GeoInterface-compatible geometries as input (from GeoDataFrames, GeoJSON, ArchGDAL, GeometryOps, and many more packages!).","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install via ]add TGGeometry in the REPL, or Pkg.add(\"TGGeometry\").","category":"page"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since TGGeometry allows any GeoInterface-compatible geometry as input, let's start with some geometries from NaturalEarth.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using NaturalEarth\nusing TGGeometry\nall_countries = naturalearth(\"admin_0_countries\", 10)\ngermany = all_countries.geometry[findfirst(==(\"Germany\"), all_countries.NAME)]\nbelgium = all_countries.geometry[findfirst(==(\"Belgium\"), all_countries.NAME)]\nusing CairoMakie, GeoInterfaceMakie # hide\nCairoMakie.activate!(; type = :svg) # hide\nf, a, p = poly(germany; label = \"Germany\", color = Makie.wong_colors()[1], axis = (; aspect = DataAspect(),), figure = (; size = (450, 300))) # hide\npoly!(a, belgium; label = \"Belgium\", color = Makie.wong_colors()[2]) # hide\nleg = axislegend(a; position = :lt) # hide\nhidedecorations!(a) # hide\nf # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.intersects(germany, belgium)","category":"page"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.contains(germany, belgium)","category":"page"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.touches(germany, belgium)","category":"page"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.disjoint(germany, belgium)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use any data loader, like GeoJSON, GeoDataFrames, ArchGDAL, etc.  You can also construct your own geometries via GeometryBasics, GeoInterface wrapper geometries, or accepted basic types like 2-tuple points.","category":"page"},{"location":"","page":"Home","title":"Home","text":"berlin = (13.4050, 52.5200) # berlin (longitude, latitude)\nscatter!(a, [berlin], color = :red, label = \"Berlin\") # hide\ndelete!(leg) # hide\nleg = axislegend(a; position = :lt) # hide\nf # hide`","category":"page"},{"location":"","page":"Home","title":"Home","text":"TGGeometry.contains(germany, berlin)","category":"page"},{"location":"#\"Preparing\"-using-TGGeom","page":"Home","title":"\"Preparing\" using TGGeom","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TGGeometry is fast naturally, but you can make it even faster by \"preparing\" your geometries by converting them to TGGeoms.  This converts the geometries to opaque pointers to a tg geometry - still fully GeoInterface-compatible though, but they have the acceleration benefits and don't have to be continually converted every time you call a predicate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The way to convert is to call GeoInterface.convert(TGGeometry, geom).  This will convert the geometry to a TGGeom and return the new TGGeom object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's see the difference in speed, between using a TGGeom and a GeoJSON polygon:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Chairmarks, GeoInterface\ngj_bench = @be TGGeometry.contains($germany, $berlin) seconds=1","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Convert to TGGeom\ngermany_tg = GeoInterface.convert(TGGeometry, germany)\n\ntg_bench = @be TGGeometry.contains($germany_tg, $berlin) seconds=1","category":"page"},{"location":"","page":"Home","title":"Home","text":"faster_factor = Statistics.median(gj_bench).time / Statistics.median(tg_bench).time \n@info \"The prepared approach is about $(round(faster_factor, digits=2))x faster!\"","category":"page"},{"location":"#Predicates","page":"Home","title":"Predicates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Predicates from the DE-9IM model are available (but not a full relate function that would return the full DE-9IM matrix).","category":"page"},{"location":"#TGGeometry.intersects","page":"Home","title":"TGGeometry.intersects","text":"intersects(geom1, geom2)\n\nCheck if geom1 and geom2 intersect, as defined by DE-9IM [de9im].\n\nSpecifically, this checks that the intersection of two geometries does not result in an empty set.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.contains","page":"Home","title":"TGGeometry.contains","text":"contains(geom1, geom2)\n\nCheck if geom1 completely contains geom2, as defined by DE-9IM [de9im].\n\nThis means that the boundary and interior of geom2 lie entirely inside geom1, and they cannot intersect the exterior of geom1.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.touches","page":"Home","title":"TGGeometry.touches","text":"touches(geom1, geom2)\n\nCheck if geom1 touches geom2, as defined by DE-9IM [de9im].\n\nThis means that the intersection of two geometries has at least one point in common, but does not completely contain the other.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.disjoint","page":"Home","title":"TGGeometry.disjoint","text":"disjoint(geom1, geom2)\n\nCheck if geom1 and geom2 are disjoint (completely non-intersecting and separate), as defined by DE-9IM [de9im].\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.equals","page":"Home","title":"TGGeometry.equals","text":"equals(geom1, geom2)\n\nCheck if geom1 and geom2 are spatially equal, as defined by DE-9IM [de9im].\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries. \n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.covers","page":"Home","title":"TGGeometry.covers","text":"covers(geom1, geom2)\n\nCheck if geom1 covers geom2, as defined by DE-9IM [de9im].\n\nThis means that no points of geom2 lie outside of geom1.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.coveredby","page":"Home","title":"TGGeometry.coveredby","text":"coveredby(geom1, geom2)\n\nCheck if geom1 is covered by geom2, as defined by DE-9IM [de9im].\n\nThis means that no points of geom1 lie outside of geom2.  \n\nEquivalent to covers(geom2, geom1) - argument order reversed.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.within","page":"Home","title":"TGGeometry.within","text":"within(geom1, geom2)\n\nCheck if geom1 is within geom2, as defined by DE-9IM [de9im].\n\nThis means that the boundary and interior of geom1 lie entirely inside geom2, and they cannot intersect the exterior of geom2.\n\nThis is the opposite of contains(geom2, geom1).\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeom","page":"Home","title":"TGGeom","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The TGGeom type is a wrapper around the tg_geom object returned by the tg library.  It is fully GeoInterface.jl compatible, and is able to accept any combination of GeoInterface-compatible geometries as input (from GeoDataFrames, GeoJSON, ArchGDAL, GeometryOps, and many more packages!).","category":"page"},{"location":"#TGGeometry.TGGeom","page":"Home","title":"TGGeometry.TGGeom","text":"TGGeom\n\nA wrapper around a tg_geom pointer. Automatically handles memory management through a finalizer.\n\n\n\n\n\n","category":"type"},{"location":"#Installation-2","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It's as simple as ]add TGGeometry.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License - see the LICENSE file for details.","category":"page"}]
}
