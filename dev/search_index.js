var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TGGeometry","category":"page"},{"location":"#TGGeometry","page":"Home","title":"TGGeometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TGGeometry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TGGeometry]","category":"page"},{"location":"#TGGeometry.TGGeom","page":"Home","title":"TGGeometry.TGGeom","text":"TGGeom\n\nA wrapper around a tg_geom pointer. Automatically handles memory management through a finalizer.\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.tg_geom_type","page":"Home","title":"TGGeometry.tg_geom_type","text":"tg_geom_type\n\nGeometry types.\n\nAll tg_geom are one of the following underlying types.\n\nEnumerator Note\nTG_POINT Point\nTG_LINESTRING LineString\nTG_POLYGON Polygon\nTG_MULTIPOINT MultiPoint, collection of points\nTG_MULTILINESTRING MultiLineString, collection of linestrings\nTG_MULTIPOLYGON MultiPolygon, collection of polygons\nTG_GEOMETRYCOLLECTION GeometryCollection, collection of geometries\n\nSee also\n\ntg_geom_typeof(), tg_geom_type_string(), GeometryAccessors\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.tg_index","page":"Home","title":"TGGeometry.tg_index","text":"tg_index\n\nGeometry indexing options.\n\nUsed for polygons, rings, and lines to make the point-in-polygon and geometry intersection operations fast.\n\nAn index can also be used for efficiently traversing, searching, and  performing nearest-neighbor (kNN) queries on the segment using  tg_ring_index_*() and tg_ring_nearest() functions.\n\nEnumerator Note\nTG_DEFAULT default is TG_NATURAL or tg_env_set_default_index().\nTG_NONE no indexing available, or disabled.\nTG_NATURAL indexing with natural ring order, for rings/lines\nTG_YSTRIPES indexing using segment striping, rings only\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.tg_point","page":"Home","title":"TGGeometry.tg_point","text":"tg_point\n\nThe base point type used for all geometries.\n\nSee also\n\nPointFuncs\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.tg_rect","page":"Home","title":"TGGeometry.tg_rect","text":"tg_rect\n\nA rectangle defined by a minimum and maximum coordinates. Returned by the tg_geom_rect(), tg_ring_rect(), and other *_rect()  functions for getting a geometry's minumum bounding rectangle. Also used internally for geometry indexing.\n\nSee also\n\nRectFuncs\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.tg_segment","page":"Home","title":"TGGeometry.tg_segment","text":"tg_segment\n\nThe base segment type used in tg_line and tg_ring for joining two vertices.\n\nSee also\n\nSegmentFuncs\n\n\n\n\n\n","category":"type"},{"location":"#TGGeometry.contains","page":"Home","title":"TGGeometry.contains","text":"contains(geom1, geom2)\n\nCheck if geom1 completely contains geom2, as defined by DE-9IM [de9im].\n\nThis means that the boundary and interior of geom2 lie entirely inside geom1, and they cannot intersect the exterior of geom1.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.coveredby","page":"Home","title":"TGGeometry.coveredby","text":"coveredby(geom1, geom2)\n\nCheck if geom1 is covered by geom2, as defined by DE-9IM [de9im].\n\nThis means that no points of geom1 lie outside of geom2.  \n\nEquivalent to covers(geom2, geom1) - argument order reversed.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.covers","page":"Home","title":"TGGeometry.covers","text":"covers(geom1, geom2)\n\nCheck if geom1 covers geom2, as defined by DE-9IM [de9im].\n\nThis means that no points of geom2 lie outside of geom1.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.disjoint","page":"Home","title":"TGGeometry.disjoint","text":"disjoint(geom1, geom2)\n\nCheck if geom1 and geom2 are disjoint (completely non-intersecting and separate), as defined by DE-9IM [de9im].\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.equals","page":"Home","title":"TGGeometry.equals","text":"equals(geom1, geom2)\n\nCheck if geom1 and geom2 are spatially equal, as defined by DE-9IM [de9im].\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries. \n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.intersects","page":"Home","title":"TGGeometry.intersects","text":"intersects(geom1, geom2)\n\nCheck if geom1 and geom2 intersect, as defined by DE-9IM [de9im].\n\nSpecifically, this checks that the intersection of two geometries does not result in an empty set.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.tg_env_set_allocator-Tuple{Any, Any, Any}","page":"Home","title":"TGGeometry.tg_env_set_allocator","text":"tg_env_set_allocator(malloc, realloc, free)\n\nGlobalFuncs Global environment\n\nFunctions for optionally setting the behavior of the TG environment. These, if desired, should be called only once at program start up and prior to calling any other tg_*() functions. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_geom_equals-Tuple{Any, Any}","page":"Home","title":"TGGeometry.tg_geom_equals","text":"tg_geom_equals(a, b)\n\nGeometryPredicates Geometry predicates\n\nFunctions for testing the spatial relations of two geometries. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_geom_geojson-Tuple{Any, Any, Any}","page":"Home","title":"TGGeometry.tg_geom_geojson","text":"tg_geom_geojson(geom, dst, n)\n\nGeometryWriting Geometry writing\n\nFunctions for writing geometries as external data representations. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_geom_new_point-Tuple{Any}","page":"Home","title":"TGGeometry.tg_geom_new_point","text":"tg_geom_new_point(point)\n\nGeometryConstructors Geometry constructors\n\nFunctions for creating and freeing geometries.  @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_geom_new_point_z-Tuple{Any, Any}","page":"Home","title":"TGGeometry.tg_geom_new_point_z","text":"tg_geom_new_point_z(point, z)\n\nGeometryConstructorsEx Geometry with alternative dimensions\n\nFunctions for working with geometries that have more than two dimensions or are empty. The extra dimensional coordinates contained within these geometries are only carried along and serve no other purpose than to be available for when it's desired to export to an output representation such as GeoJSON, WKT, or WKB. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_geom_typeof-Tuple{Any}","page":"Home","title":"TGGeometry.tg_geom_typeof","text":"tg_geom_typeof(geom)\n\nGeometryAccessors Geometry accessors\n\nFunctions for accessing various information about geometries, such as getting the geometry type or extracting underlying components or coordinates. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_line_new-Tuple{Any, Any}","page":"Home","title":"TGGeometry.tg_line_new","text":"tg_line_new(points, npoints)\n\nLineFuncs Line functions\n\nFunctions for working directly with the tg_line type.\n\nThere are no direct spatial predicates for tg_line. If you want to perform operations like \"intersects\" or \"covers\" then you  must upcast the line to a tg_geom, like such:\n\n[`tg_geom_intersects`](@ref)((struct [`tg_geom`](@ref)*)line, geom); @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_parse_geojson-Tuple{Any}","page":"Home","title":"TGGeometry.tg_parse_geojson","text":"tg_parse_geojson(geojson)\n\nGeometryParsing Geometry parsing\n\nFunctions for parsing geometries from external data representations. It's recommended to use tg_geom_error() after parsing to check for errors. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_point_rect-Tuple{Any}","page":"Home","title":"TGGeometry.tg_point_rect","text":"tg_point_rect(point)\n\nPointFuncs Point functions\n\nFunctions for working directly with the tg_point type. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_poly_new-Tuple{Any, Any, Any}","page":"Home","title":"TGGeometry.tg_poly_new","text":"tg_poly_new(exterior, holes, nholes)\n\nPolyFuncs Polygon functions\n\nFunctions for working directly with the tg_poly type.\n\nThere are no direct spatial predicates for tg_poly. If you want to perform operations like \"intersects\" or \"covers\" then you  must upcast the poly to a tg_geom, like such:\n\n[`tg_geom_intersects`](@ref)((struct [`tg_geom`](@ref)*)poly, geom); @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_rect_expand-Tuple{Any, Any}","page":"Home","title":"TGGeometry.tg_rect_expand","text":"tg_rect_expand(rect, other)\n\nRectFuncs Rectangle functions\n\nFunctions for working directly with the tg_rect type. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_ring_new-Tuple{Any, Any}","page":"Home","title":"TGGeometry.tg_ring_new","text":"tg_ring_new(points, npoints)\n\nRingFuncs Ring functions\n\nFunctions for working directly with the tg_ring type.\n\nThere are no direct spatial predicates for tg_ring. If you want to perform operations like \"intersects\" or \"covers\" then you  must upcast the ring to a tg_geom, like such:\n\n[`tg_geom_intersects`](@ref)((struct [`tg_geom`](@ref)*)ring, geom); @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.tg_segment_rect-Tuple{Any}","page":"Home","title":"TGGeometry.tg_segment_rect","text":"tg_segment_rect(s)\n\nSegmentFuncs Segment functions\n\nFunctions for working directly with the tg_segment type. @{\n\n\n\n\n\n","category":"method"},{"location":"#TGGeometry.touches","page":"Home","title":"TGGeometry.touches","text":"touches(geom1, geom2)\n\nCheck if geom1 touches geom2, as defined by DE-9IM [de9im].\n\nThis means that the intersection of two geometries has at least one point in common, but does not completely contain the other.\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"},{"location":"#TGGeometry.within","page":"Home","title":"TGGeometry.within","text":"within(geom1, geom2)\n\nCheck if geom1 is within geom2, as defined by DE-9IM [de9im].\n\nThis means that the boundary and interior of geom1 lie entirely inside geom2, and they cannot intersect the exterior of geom2.\n\nThis is the opposite of contains(geom2, geom1).\n\nArguments\n\ngeom1: The first geometry.  May be any GeoInterface-compatible geometry.\ngeom2: The second geometry.  May be any GeoInterface-compatible geometry.\n\n[de9im]: the Dimensionally Extended 9-Intersection Model that describes the relationship between two planar geometries.\n\n\n\n\n\n","category":"function"}]
}
